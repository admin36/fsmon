//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace fsmon.MerrickSMWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="svcDomainAdminSoap", Namespace="http://tempuri.org/")]
    public partial class svcDomainAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public svcDomainAdmin() {
            this.Url = "http://merrick.safesecureweb.com/Services/svcDomainAdmin.asmx";
        }
        
        public svcDomainAdmin(string url) {
            this.Url = url;
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult AddDomain(
                    string AuthUserName, 
                    string AuthPassword, 
                    string DomainName, 
                    string Path, 
                    string PrimaryDomainAdminUserName, 
                    string PrimaryDomainAdminPassword, 
                    string PrimaryDomainAdminFirstName, 
                    string PrimaryDomainAdminLastName, 
                    string IP, 
                    int ImapPort, 
                    int PopPort, 
                    int SmtpPort, 
                    int MaxAliases, 
                    int MaxDomainSizeInMB, 
                    int MaxDomainUsers, 
                    int MaxMailboxSizeInMB, 
                    int MaxMessageSize, 
                    int MaxRecipients, 
                    int MaxDomainAliases, 
                    int MaxLists, 
                    bool ShowDomainAliasMenu, 
                    bool ShowContentFilteringMenu, 
                    bool ShowSpamMenu, 
                    bool ShowStatsMenu, 
                    bool RequireSmtpAuthentication, 
                    bool ShowListMenu, 
                    string ListCommandAddress) {
            object[] results = this.Invoke("AddDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        Path,
                        PrimaryDomainAdminUserName,
                        PrimaryDomainAdminPassword,
                        PrimaryDomainAdminFirstName,
                        PrimaryDomainAdminLastName,
                        IP,
                        ImapPort,
                        PopPort,
                        SmtpPort,
                        MaxAliases,
                        MaxDomainSizeInMB,
                        MaxDomainUsers,
                        MaxMailboxSizeInMB,
                        MaxMessageSize,
                        MaxRecipients,
                        MaxDomainAliases,
                        MaxLists,
                        ShowDomainAliasMenu,
                        ShowContentFilteringMenu,
                        ShowSpamMenu,
                        ShowStatsMenu,
                        RequireSmtpAuthentication,
                        ShowListMenu,
                        ListCommandAddress});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomain(
                    string AuthUserName, 
                    string AuthPassword, 
                    string DomainName, 
                    string Path, 
                    string PrimaryDomainAdminUserName, 
                    string PrimaryDomainAdminPassword, 
                    string PrimaryDomainAdminFirstName, 
                    string PrimaryDomainAdminLastName, 
                    string IP, 
                    int ImapPort, 
                    int PopPort, 
                    int SmtpPort, 
                    int MaxAliases, 
                    int MaxDomainSizeInMB, 
                    int MaxDomainUsers, 
                    int MaxMailboxSizeInMB, 
                    int MaxMessageSize, 
                    int MaxRecipients, 
                    int MaxDomainAliases, 
                    int MaxLists, 
                    bool ShowDomainAliasMenu, 
                    bool ShowContentFilteringMenu, 
                    bool ShowSpamMenu, 
                    bool ShowStatsMenu, 
                    bool RequireSmtpAuthentication, 
                    bool ShowListMenu, 
                    string ListCommandAddress, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("AddDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        Path,
                        PrimaryDomainAdminUserName,
                        PrimaryDomainAdminPassword,
                        PrimaryDomainAdminFirstName,
                        PrimaryDomainAdminLastName,
                        IP,
                        ImapPort,
                        PopPort,
                        SmtpPort,
                        MaxAliases,
                        MaxDomainSizeInMB,
                        MaxDomainUsers,
                        MaxMailboxSizeInMB,
                        MaxMessageSize,
                        MaxRecipients,
                        MaxDomainAliases,
                        MaxLists,
                        ShowDomainAliasMenu,
                        ShowContentFilteringMenu,
                        ShowSpamMenu,
                        ShowStatsMenu,
                        RequireSmtpAuthentication,
                        ShowListMenu,
                        ListCommandAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndAddDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomainEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult AddDomainEx(string AuthUserName, string AuthPassword, string DomainName, string Path, string PrimaryDomainAdminUserName, string PrimaryDomainAdminPassword, string PrimaryDomainAdminFirstName, string PrimaryDomainAdminLastName, string IP) {
            object[] results = this.Invoke("AddDomainEx", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        Path,
                        PrimaryDomainAdminUserName,
                        PrimaryDomainAdminPassword,
                        PrimaryDomainAdminFirstName,
                        PrimaryDomainAdminLastName,
                        IP});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomainEx(string AuthUserName, string AuthPassword, string DomainName, string Path, string PrimaryDomainAdminUserName, string PrimaryDomainAdminPassword, string PrimaryDomainAdminFirstName, string PrimaryDomainAdminLastName, string IP, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDomainEx", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        Path,
                        PrimaryDomainAdminUserName,
                        PrimaryDomainAdminPassword,
                        PrimaryDomainAdminFirstName,
                        PrimaryDomainAdminLastName,
                        IP}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndAddDomainEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDomainNameAndPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult UpdateDomainNameAndPath(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, string NewDomainPath) {
            object[] results = this.Invoke("UpdateDomainNameAndPath", new object[] {
                        AuthUserName,
                        AuthPassword,
                        OldDomainName,
                        NewDomainName,
                        NewDomainPath});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDomainNameAndPath(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, string NewDomainPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDomainNameAndPath", new object[] {
                        AuthUserName,
                        AuthPassword,
                        OldDomainName,
                        NewDomainName,
                        NewDomainPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndUpdateDomainNameAndPath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateDomainKeysCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainKeyResult GenerateDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName, int KeySize, string selector) {
            object[] results = this.Invoke("GenerateDomainKeysCert", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        KeySize,
                        selector});
            return ((DomainKeyResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGenerateDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName, int KeySize, string selector, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GenerateDomainKeysCert", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        KeySize,
                        selector}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainKeyResult EndGenerateDomainKeysCert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainKeyResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainKeysCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainKeyResult GetDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName) {
            object[] results = this.Invoke("GetDomainKeysCert", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName});
            return ((DomainKeyResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainKeysCert", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainKeyResult EndGetDomainKeysCert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainKeyResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RenameDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult RenameDomain(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName) {
            object[] results = this.Invoke("RenameDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        OldDomainName,
                        NewDomainName});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameDomain(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        OldDomainName,
                        NewDomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndRenameDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReloadDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult ReloadDomain(string AuthUserName, string AuthPassword, string DomainName) {
            object[] results = this.Invoke("ReloadDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReloadDomain(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReloadDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndReloadDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult UpdateDomain(
                    string AuthUserName, 
                    string AuthPassword, 
                    string DomainName, 
                    string ServerIP, 
                    int ImapPort, 
                    int PopPort, 
                    int SmtpPort, 
                    int MaxAliases, 
                    int MaxDomainSizeInMB, 
                    int MaxDomainUsers, 
                    int MaxMailboxSizeInMB, 
                    int MaxMessageSize, 
                    int MaxRecipients, 
                    int MaxDomainAliases, 
                    int MaxLists, 
                    bool ShowDomainAliasMenu, 
                    bool ShowContentFilteringMenu, 
                    bool ShowSpamMenu, 
                    bool ShowStatsMenu, 
                    bool RequireSmtpAuthentication, 
                    bool ShowListMenu, 
                    string ListCommandAddress) {
            object[] results = this.Invoke("UpdateDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        ServerIP,
                        ImapPort,
                        PopPort,
                        SmtpPort,
                        MaxAliases,
                        MaxDomainSizeInMB,
                        MaxDomainUsers,
                        MaxMailboxSizeInMB,
                        MaxMessageSize,
                        MaxRecipients,
                        MaxDomainAliases,
                        MaxLists,
                        ShowDomainAliasMenu,
                        ShowContentFilteringMenu,
                        ShowSpamMenu,
                        ShowStatsMenu,
                        RequireSmtpAuthentication,
                        ShowListMenu,
                        ListCommandAddress});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDomain(
                    string AuthUserName, 
                    string AuthPassword, 
                    string DomainName, 
                    string ServerIP, 
                    int ImapPort, 
                    int PopPort, 
                    int SmtpPort, 
                    int MaxAliases, 
                    int MaxDomainSizeInMB, 
                    int MaxDomainUsers, 
                    int MaxMailboxSizeInMB, 
                    int MaxMessageSize, 
                    int MaxRecipients, 
                    int MaxDomainAliases, 
                    int MaxLists, 
                    bool ShowDomainAliasMenu, 
                    bool ShowContentFilteringMenu, 
                    bool ShowSpamMenu, 
                    bool ShowStatsMenu, 
                    bool RequireSmtpAuthentication, 
                    bool ShowListMenu, 
                    string ListCommandAddress, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("UpdateDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        ServerIP,
                        ImapPort,
                        PopPort,
                        SmtpPort,
                        MaxAliases,
                        MaxDomainSizeInMB,
                        MaxDomainUsers,
                        MaxMailboxSizeInMB,
                        MaxMessageSize,
                        MaxRecipients,
                        MaxDomainAliases,
                        MaxLists,
                        ShowDomainAliasMenu,
                        ShowContentFilteringMenu,
                        ShowSpamMenu,
                        ShowStatsMenu,
                        RequireSmtpAuthentication,
                        ShowListMenu,
                        ListCommandAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndUpdateDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedDomainDefaults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SettingsRequestResult GetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] requestedSettings) {
            object[] results = this.Invoke("GetRequestedDomainDefaults", new object[] {
                        AuthUserName,
                        AuthPassword,
                        requestedSettings});
            return ((SettingsRequestResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] requestedSettings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestedDomainDefaults", new object[] {
                        AuthUserName,
                        AuthPassword,
                        requestedSettings}, callback, asyncState);
        }
        
        /// <remarks/>
        public SettingsRequestResult EndGetRequestedDomainDefaults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SettingsRequestResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedDomainSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SettingsRequestResult GetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] requestedSettings) {
            object[] results = this.Invoke("GetRequestedDomainSettings", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        requestedSettings});
            return ((SettingsRequestResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] requestedSettings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestedDomainSettings", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        requestedSettings}, callback, asyncState);
        }
        
        /// <remarks/>
        public SettingsRequestResult EndGetRequestedDomainSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SettingsRequestResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedDomainDefaults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult SetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] newSettings) {
            object[] results = this.Invoke("SetRequestedDomainDefaults", new object[] {
                        AuthUserName,
                        AuthPassword,
                        newSettings});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] newSettings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetRequestedDomainDefaults", new object[] {
                        AuthUserName,
                        AuthPassword,
                        newSettings}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndSetRequestedDomainDefaults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedDomainSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult SetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] newSettings) {
            object[] results = this.Invoke("SetRequestedDomainSettings", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        newSettings});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] newSettings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetRequestedDomainSettings", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        newSettings}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndSetRequestedDomainSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult DeleteDomain(string AuthUserName, string AuthPassword, string DomainName, bool DeleteFiles) {
            object[] results = this.Invoke("DeleteDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        DeleteFiles});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomain(string AuthUserName, string AuthPassword, string DomainName, bool DeleteFiles, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        DeleteFiles}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndDeleteDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainsWithProperties", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericPropertyResult GetAllDomainsWithProperties(string AuthUserName, string AuthPassword, string[] PropertyKeys) {
            object[] results = this.Invoke("GetAllDomainsWithProperties", new object[] {
                        AuthUserName,
                        AuthPassword,
                        PropertyKeys});
            return ((GenericPropertyResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDomainsWithProperties(string AuthUserName, string AuthPassword, string[] PropertyKeys, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDomainsWithProperties", new object[] {
                        AuthUserName,
                        AuthPassword,
                        PropertyKeys}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericPropertyResult EndGetAllDomainsWithProperties(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericPropertyResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomains", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainListResult GetAllDomains(string AuthUserName, string AuthPassword) {
            object[] results = this.Invoke("GetAllDomains", new object[] {
                        AuthUserName,
                        AuthPassword});
            return ((DomainListResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDomains(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDomains", new object[] {
                        AuthUserName,
                        AuthPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainListResult EndGetAllDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainListResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainCounts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainCountInfoResult GetDomainCounts(string AuthUserName, string AuthPassword, string DomainName) {
            object[] results = this.Invoke("GetDomainCounts", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName});
            return ((DomainCountInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainCounts(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainCounts", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainCountInfoResult EndGetDomainCounts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainCountInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainAliasesWithProperties", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericPropertyResult GetAllDomainAliasesWithProperties(string AuthUserName, string AuthPassword, string[] PropertyKeys) {
            object[] results = this.Invoke("GetAllDomainAliasesWithProperties", new object[] {
                        AuthUserName,
                        AuthPassword,
                        PropertyKeys});
            return ((GenericPropertyResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDomainAliasesWithProperties(string AuthUserName, string AuthPassword, string[] PropertyKeys, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDomainAliasesWithProperties", new object[] {
                        AuthUserName,
                        AuthPassword,
                        PropertyKeys}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericPropertyResult EndGetAllDomainAliasesWithProperties(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericPropertyResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainAliases", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainAliasInfoResult GetAllDomainAliases(string AuthUserName, string AuthPassword) {
            object[] results = this.Invoke("GetAllDomainAliases", new object[] {
                        AuthUserName,
                        AuthPassword});
            return ((DomainAliasInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDomainAliases(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDomainAliases", new object[] {
                        AuthUserName,
                        AuthPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainAliasInfoResult EndGetAllDomainAliases(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainAliasInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainUsersWithProperties", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainUserInfoWithPropertiesResult GetAllDomainUsersWithProperties(string AuthUserName, string AuthPassword, string DomainName, string[] PropertyKeys) {
            object[] results = this.Invoke("GetAllDomainUsersWithProperties", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        PropertyKeys});
            return ((DomainUserInfoWithPropertiesResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDomainUsersWithProperties(string AuthUserName, string AuthPassword, string DomainName, string[] PropertyKeys, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDomainUsersWithProperties", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        PropertyKeys}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainUserInfoWithPropertiesResult EndGetAllDomainUsersWithProperties(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainUserInfoWithPropertiesResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainUserInfoResult GetDomainUsers(string AuthUserName, string AuthPassword, string DomainName) {
            object[] results = this.Invoke("GetDomainUsers", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName});
            return ((DomainUserInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainUsers(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainUsers", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainUserInfoResult EndGetDomainUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainUserInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainStatistics", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StatInfoResult GetDomainStatistics(string AuthUserName, string AuthPassword, string DomainName, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetDomainStatistics", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        StartDate,
                        EndDate});
            return ((StatInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainStatistics(string AuthUserName, string AuthPassword, string DomainName, System.DateTime StartDate, System.DateTime EndDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainStatistics", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        StartDate,
                        EndDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public StatInfoResult EndGetDomainStatistics(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StatInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainStatistics", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AllDomainStatResult GetAllDomainStatistics(string AuthUserName, string AuthPassword, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetAllDomainStatistics", new object[] {
                        AuthUserName,
                        AuthPassword,
                        StartDate,
                        EndDate});
            return ((AllDomainStatResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDomainStatistics(string AuthUserName, string AuthPassword, System.DateTime StartDate, System.DateTime EndDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDomainStatistics", new object[] {
                        AuthUserName,
                        AuthPassword,
                        StartDate,
                        EndDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public AllDomainStatResult EndGetAllDomainStatistics(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AllDomainStatResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrimaryDomainAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PrimaryDomainAdminResult GetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName) {
            object[] results = this.Invoke("GetPrimaryDomainAdmin", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName});
            return ((PrimaryDomainAdminResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPrimaryDomainAdmin", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public PrimaryDomainAdminResult EndGetPrimaryDomainAdmin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PrimaryDomainAdminResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPrimaryDomainAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult SetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName, string AdminUserName) {
            object[] results = this.Invoke("SetPrimaryDomainAdmin", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        AdminUserName});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName, string AdminUserName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetPrimaryDomainAdmin", new object[] {
                        AuthUserName,
                        AuthPassword,
                        DomainName,
                        AdminUserName}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndSetPrimaryDomainAdmin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainDefaults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainSettingsResult GetDomainDefaults(string AuthUserName, string AuthPassword) {
            object[] results = this.Invoke("GetDomainDefaults", new object[] {
                        AuthUserName,
                        AuthPassword});
            return ((DomainSettingsResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainDefaults(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainDefaults", new object[] {
                        AuthUserName,
                        AuthPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainSettingsResult EndGetDomainDefaults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainSettingsResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisableDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult DisableDomain(string AuthUserName, string AuthPassword, string domainName) {
            object[] results = this.Invoke("DisableDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisableDomain(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisableDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndDisableDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnableDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult EnableDomain(string AuthUserName, string AuthPassword, string domainName) {
            object[] results = this.Invoke("EnableDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableDomain(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableDomain", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndEnableDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfoResult GetDomainInfo(string AuthUserName, string AuthPassword, string domainName) {
            object[] results = this.Invoke("GetDomainInfo", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName});
            return ((DomainInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainInfo(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainInfo", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfoResult EndGetDomainInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainSettingsResult GetDomainSettings(string AuthUserName, string AuthPassword, string domainName) {
            object[] results = this.Invoke("GetDomainSettings", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName});
            return ((DomainSettingsResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainSettings(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainSettings", new object[] {
                        AuthUserName,
                        AuthPassword,
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainSettingsResult EndGetDomainSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainSettingsResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainForwarding", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainForwardInfoResult GetDomainForwarding(string AuthUserName, string AuthPassword, bool includeDomains) {
            object[] results = this.Invoke("GetDomainForwarding", new object[] {
                        AuthUserName,
                        AuthPassword,
                        includeDomains});
            return ((DomainForwardInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainForwarding(string AuthUserName, string AuthPassword, bool includeDomains, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainForwarding", new object[] {
                        AuthUserName,
                        AuthPassword,
                        includeDomains}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainForwardInfoResult EndGetDomainForwarding(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainForwardInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainForwardingBlock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainForwardBlockInfoResult GetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID) {
            object[] results = this.Invoke("GetDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        blockID});
            return ((DomainForwardBlockInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        blockID}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainForwardBlockInfoResult EndGetDomainForwardingBlock(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainForwardBlockInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainForwardingBlockByTargetAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainForwardBlockInfoResult GetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress) {
            object[] results = this.Invoke("GetDomainForwardingBlockByTargetAddress", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress});
            return ((DomainForwardBlockInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainForwardingBlockByTargetAddress", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainForwardBlockInfoResult EndGetDomainForwardingBlockByTargetAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainForwardBlockInfoResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDomainForwardingBlock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult SetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, string targetAddress, string[] domains) {
            object[] results = this.Invoke("SetDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        blockID,
                        targetAddress,
                        domains});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, string targetAddress, string[] domains, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        blockID,
                        targetAddress,
                        domains}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndSetDomainForwardingBlock(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDomainForwardingBlockByTargetAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult SetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, string[] domains) {
            object[] results = this.Invoke("SetDomainForwardingBlockByTargetAddress", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress,
                        domains});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, string[] domains, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDomainForwardingBlockByTargetAddress", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress,
                        domains}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndSetDomainForwardingBlockByTargetAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomainForwardingBlock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult AddDomainForwardingBlock(string AuthUserName, string AuthPassword, string targetAddress, string[] domains) {
            object[] results = this.Invoke("AddDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress,
                        domains});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomainForwardingBlock(string AuthUserName, string AuthPassword, string targetAddress, string[] domains, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress,
                        domains}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndAddDomainForwardingBlock(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomainForwardingBlock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult DeleteDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID) {
            object[] results = this.Invoke("DeleteDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        blockID});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomainForwardingBlock", new object[] {
                        AuthUserName,
                        AuthPassword,
                        blockID}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndDeleteDomainForwardingBlock(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomainForwardBlockByTargetAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GenericResult DeleteDomainForwardBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress) {
            object[] results = this.Invoke("DeleteDomainForwardBlockByTargetAddress", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress});
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomainForwardBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomainForwardBlockByTargetAddress", new object[] {
                        AuthUserName,
                        AuthPassword,
                        targetAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public GenericResult EndDeleteDomainForwardBlockByTargetAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDomainArchiveRule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SettingsRequestResult SetDomainArchiveRule(string AuthUserName, string AuthPassword, string[] parameters) {
            object[] results = this.Invoke("SetDomainArchiveRule", new object[] {
                        AuthUserName,
                        AuthPassword,
                        parameters});
            return ((SettingsRequestResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDomainArchiveRule(string AuthUserName, string AuthPassword, string[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDomainArchiveRule", new object[] {
                        AuthUserName,
                        AuthPassword,
                        parameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public SettingsRequestResult EndSetDomainArchiveRule(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SettingsRequestResult)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class GenericResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainForwardBlockInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public DomainForwardBlockInfo domainForwardBlock;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainForwardBlockInfo {
        
        /// <remarks/>
        public int blockID;
        
        /// <remarks/>
        public string targetAddress;
        
        /// <remarks/>
        public string[] domains;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainForwardInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public DomainForwardBlockInfo[] blocks;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string Path;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainSettingsResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string ServerIP;
        
        /// <remarks/>
        public string Path;
        
        /// <remarks/>
        public int ImapPort;
        
        /// <remarks/>
        public int PopPort;
        
        /// <remarks/>
        public int SmtpPort;
        
        /// <remarks/>
        public int MaxAliases;
        
        /// <remarks/>
        public int MaxDomainAliases;
        
        /// <remarks/>
        public int MaxLists;
        
        /// <remarks/>
        public int MaxDomainSizeInMB;
        
        /// <remarks/>
        public int MaxDomainUsers;
        
        /// <remarks/>
        public int MaxMailboxSizeInMB;
        
        /// <remarks/>
        public int MaxMessageSize;
        
        /// <remarks/>
        public int MaxRecipients;
        
        /// <remarks/>
        public bool ShowDomainAliasMenu;
        
        /// <remarks/>
        public bool ShowContentFilteringMenu;
        
        /// <remarks/>
        public bool ShowSpamMenu;
        
        /// <remarks/>
        public bool ShowStatsMenu;
        
        /// <remarks/>
        public bool ShowListMenu;
        
        /// <remarks/>
        public bool RequireSmtpAuthentication;
        
        /// <remarks/>
        public string ListCommandAddress;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PrimaryDomainAdminResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string PrimaryAdmin;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainStatInfo {
        
        /// <remarks/>
        public string DomainName;
        
        /// <remarks/>
        public long MessagesReceived;
        
        /// <remarks/>
        public long MessagesSent;
        
        /// <remarks/>
        public long BytesReceived;
        
        /// <remarks/>
        public long BytesSent;
        
        /// <remarks/>
        public long BytesSize;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AllDomainStatResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public DomainStatInfo[] Stats;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class StatInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public long MessagesReceived;
        
        /// <remarks/>
        public long MessagesSent;
        
        /// <remarks/>
        public long BytesReceived;
        
        /// <remarks/>
        public long BytesSent;
        
        /// <remarks/>
        public long BytesSize;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainUserInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string[] Users;
        
        /// <remarks/>
        public string[] DomainAliases;
        
        /// <remarks/>
        public bool CatchAll;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainUserInfoWithPropertiesResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public PropertyResultData[] Users;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public PropertyResultData[] DomainAliases;
        
        /// <remarks/>
        public bool CatchAll;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PropertyResultData {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string[] Properties;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainAliasInfo {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string DomainName;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainAliasInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public DomainAliasInfo[] DomainAliases;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainCountInfoResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public int Users;
        
        /// <remarks/>
        public int MailingLists;
        
        /// <remarks/>
        public int Aliases;
        
        /// <remarks/>
        public long Size;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainListResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string[] DomainNames;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class GenericPropertyResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public PropertyResultData[] Data;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SettingsRequestResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string[] settingValues;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainKeyResult {
        
        /// <remarks/>
        public bool Result;
        
        /// <remarks/>
        public int ResultCode;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string privateKey;
        
        /// <remarks/>
        public string publicKey;
        
        /// <remarks/>
        public string selector;
    }
}
